// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model User {
    id Int @id @default(autoincrement())

    clerkId      String  @unique
    name         String?
    email        String  @unique
    profileImage String?
    tier         String? @default("Free")
    credits      String? @default("10")

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    localGoogleId    String? @unique
    googleResourceId String? @unique

    LocalGoogleCredential LocalGoogleCredential?
    DiscordWebhook        DiscordWebhook[]
    Slack                 Slack[]
    Notion                Notion[]
    Connections           Connections[]
    Workflows             Workflows[]
}

model LocalGoogleCredential {
    id          String @id @default(uuid())
    accessToken String @unique

    folderId   String?
    pageToken  String?
    channelId  String?
    subscribed Boolean @default(false)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    userId Int  @unique
    user   User @relation(fields: [userId], references: [id])
}

model DiscordWebhook {
    id        String @id @default(uuid())
    webhookId String @unique
    url       String @unique
    name      String
    guildName String
    guildId   String
    channelId String @unique

    userId      String
    user        User          @relation(fields: [userId], references: [clerkId])
    Connections Connections[]
}

model Slack {
    id String @id @default(uuid())

    appId            String
    authedUserId     String
    authedUserToken  String @unique
    slackAccessToken String @unique
    botUserId        String
    teamId           String
    teamName         String

    userId      String
    user        User          @relation(fields: [userId], references: [clerkId])
    Connections Connections[]
}

model Notion {
    id            String @id @default(uuid())
    accessToken   String @unique
    workspaceId   String @unique
    databaseId    String @unique
    workspaceName String
    workspaceIcon String

    userId      String
    user        User          @relation(fields: [userId], references: [clerkId])
    Connections Connections[]
}

model Connections {
    id   String @id @default(uuid())
    type String @unique

    userId String?
    user   User?   @relation(fields: [userId], references: [clerkId])

    discordWebhookId String?
    DiscordWebhook   DiscordWebhook? @relation(fields: [discordWebhookId], references: [id])

    notionId String?
    Notion   Notion? @relation(fields: [notionId], references: [id])

    slackId String?
    Slack   Slack?  @relation(fields: [slackId], references: [id])
}

model Workflows {
    id    String  @id @default(uuid())
    nodes String?
    edges String?
    name  String

    discordTemplate String?

    notionDbId        String?
    notionAccessToken String?
    notionTemplate    String?

    slackAccessToken String
    slackChannels    String[]
    slackTemplate    String?

    flowPath    String?
    cronPath    String?
    publish     Boolean? @default(false)
    description String

    userId String
    user   User   @relation(fields: [userId], references: [clerkId])
}
